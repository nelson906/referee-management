cat *
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class AdminMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Check if user is admin (zone admin or national admin)
    if (!in_array($user->user_type, ['admin', 'national_admin', 'super_admin'])) {
        abort(403, 'Accesso non autorizzato. Solo gli amministratori possono accedere a questa sezione.');
    }

        // Additional check: ensure admin has access to their zone
        if ($user->user_type === 'admin' && !$user->zone_id) {
            abort(403, 'Il tuo account amministratore non ha una zona assegnata. Contatta il supporto tecnico.');
        }

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class AdminOrSuperAdmin
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Allow super_admin, national_admin, and zone_admin
        $allowedTypes = ['super_admin', 'national_admin', 'admin'];

        if (!in_array($user->user_type, $allowedTypes)) {
            abort(403, 'Accesso negato. Solo gli amministratori possono accedere a questa sezione.');
        }

        // Store user context for views
        view()->share('isSuperAdmin', $user->user_type === 'super_admin');
        view()->share('isNationalAdmin', $user->user_type === 'national_admin');
        view()->share('currentUserType', $user->user_type);

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull as Middleware;

class ConvertEmptyStringsToNull extends Middleware
{
    /**
     * The names of the attributes that should not be converted to null.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect('/dashboard');
            }
        }

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class RefereeMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Check if user is a referee
        if ($user->user_type !== 'referee') {
            abort(403, 'Accesso non autorizzato. Solo gli arbitri possono accedere a questa sezione.');
        }

        // Check if referee account is active
        if (!$user->is_active) {
            abort(403, 'Il tuo account arbitro non è attivo. Contatta l\'amministratore della tua zona.');
        }

// Check if referee has completed profile
if (!$user->hasCompletedProfile()) {
    // NON reindirizzare se siamo già sulla pagina profilo
    if (!$request->routeIs('referee.profile.*')) {
        return redirect()->route('referee.profile.edit')
            ->with('warning', 'Devi completare il tuo profilo prima di poter accedere alle altre sezioni.');
    }
}

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class RefereeOrAdmin
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Allow all user types (referee, zone_admin, national_admin, super_admin)
        $allowedTypes = ['referee', 'zone_admin', 'national_admin', 'super_admin'];

        if (!in_array($user->user_type, $allowedTypes)) {
            abort(403, 'Accesso negato.');
        }

        // Store user context for views
        view()->share('isReferee', $user->user_type === 'referee');
        view()->share('isAdmin', in_array($user->user_type, ['zone_admin', 'national_admin', 'super_admin']));
        view()->share('isSuperAdmin', $user->user_type === 'super_admin');
        view()->share('currentUserType', $user->user_type);

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class SuperAdmin
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Check if user is super admin
        if ($user->user_type !== 'super_admin') {
            abort(403, 'Accesso negato. Solo i Super Admin possono accedere a questa sezione.');
        }

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class ZoneAccessMiddleware
{
    /**
     * Handle an incoming request.
     * Verifies that the user has access to resources of a specific zone.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     * @param  string|null  $parameterName  The name of the route parameter containing the zone ID (default: 'zone')
     */
    public function handle(Request $request, Closure $next, ?string $parameterName = 'zone'): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Super admins and national admins have access to all zones
        if (in_array($user->user_type, ['super_admin', 'national_admin'])) {
            return $next($request);
        }

        // Get zone ID from route parameter
        $zoneId = $request->route($parameterName);

        // If zone parameter is a model instance, get its ID
        if (is_object($zoneId) && method_exists($zoneId, 'getKey')) {
            $zoneId = $zoneId->getKey();
        }

        // Check if zone ID is provided
        if (!$zoneId) {
            abort(404, 'Zona non specificata.');
        }

        // Zone admins can only access their own zone
        if ($user->user_type === 'admin') {
            if ($user->zone_id != $zoneId) {
                abort(403, 'Non sei autorizzato ad accedere alle risorse di questa zona.');
            }
        }

        // Referees can only access resources from their zone (for zone-specific content)
        if ($user->user_type === 'referee') {
            if ($user->zone_id != $zoneId) {
                abort(403, 'Non puoi accedere alle risorse di altre zone.');
            }
        }

        return $next($request);
    }
}
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class ZoneAdminMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();

        // Allow access for zone admins and higher roles
        if (!in_array($user->user_type, ['admin', 'national_admin', 'super_admin'])) {
            abort(403, 'Accesso non autorizzato. Solo gli amministratori di zona possono accedere a questa sezione.');
        }

        return $next($request);
    }
}
