<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Create zones table first (needed for users foreign key)
        Schema::create('zones', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->text('description')->nullable();
            $table->boolean('is_national')->default(false);
            $table->string('header_document_path')->nullable();
            $table->timestamp('header_updated_at')->nullable();
            $table->unsignedBigInteger('header_updated_by')->nullable();
            $table->timestamps();

            // Indexes
            $table->index('is_national');
            $table->index('name');
        });

        // Create users table with all fields from the start
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->enum('user_type', ['super_admin', 'national_admin', 'admin', 'referee'])->default('referee');
            $table->enum('level', ['Aspirante', '1_livello', 'Regionale', 'Nazionale', 'Internazionale', 'Archivio'])->default('1_livello');
            $table->string('referee_code');
            $table->string(column: 'category')->nullable();
            $table->string(column: 'certified_date')->nullable();
            $table->foreignId('zone_id')->nullable()->constrained('zones');
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('phone')->nullable();
            $table->string('city')->nullable();
            $table->boolean('is_active')->default(true);
            $table->timestamp('last_login_at')->nullable();
            $table->json('preferences')->nullable();
            $table->rememberToken();
            $table->timestamps();
            $table->softDeletes();

            // Add indexes
            $table->index(['user_type', 'zone_id']);
            $table->index(['zone_id', 'is_active']);
            $table->index(['user_type', 'is_active']);
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
        Schema::dropIfExists('zones');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     * REFEREES TABLE - Extension Only (NO Duplicates with Users)
     */
    public function up(): void
    {
        Schema::create('referees', function (Blueprint $table) {
            $table->id();

            // ✅ LINK TO USER (Single Source of Truth)
            $table->foreignId('user_id')->unique()->constrained('users')->onDelete('cascade');

            // ✅ EXTENDED ADDRESS INFO
            $table->string('address')->nullable();
            $table->string('postal_code', 10)->nullable();
            $table->string('tax_code', 16)->nullable();

            // ✅ CERTIFICATION DETAILS
            $table->string('badge_number')->nullable();
            $table->date('first_certification_date')->nullable();
            $table->date('last_renewal_date')->nullable();
            $table->date('expiry_date')->nullable();

            // ✅ REFEREE PROFILE DATA
            $table->text('bio')->nullable();
            $table->integer('experience_years')->default(0);
            $table->json('qualifications')->nullable();
            $table->json('languages')->nullable();
            $table->json('specializations')->nullable();

            // ✅ AVAILABILITY & PREFERENCES
            $table->boolean('available_for_international')->default(false);
            $table->json('preferences')->nullable();

            // ✅ STATISTICS
            $table->integer('total_tournaments')->default(0);
            $table->integer('tournaments_current_year')->default(0);

            // ✅ PROFILE STATUS
            $table->timestamp('profile_completed_at')->nullable();

            $table->timestamps();
            $table->softDeletes();

            // ✅ INDEXES
            $table->index('user_id');
            $table->index('expiry_date');
            $table->index('available_for_international');
            $table->index('profile_completed_at');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('referees');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('clubs', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('code', 250)->unique();
            $table->foreignId('zone_id')->constrained('zones');
            $table->string('address')->nullable();
            $table->string('city')->nullable();
            $table->string('postal_code', 10)->nullable();
            $table->string('province', 5)->nullable();
            $table->string('region')->nullable();
            $table->string('phone')->nullable();
            $table->string('email')->nullable();
            $table->string('website')->nullable();
            $table->string('contact_person')->nullable();
            $table->string('contact_phone')->nullable();
            $table->string('contact_email')->nullable();
            $table->boolean('is_active')->default(true);
            $table->string('federation_code')->nullable();
            $table->json('settings')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();
            $table->softDeletes();

            $table->index(['zone_id', 'is_active']);
            $table->index(['city', 'is_active']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('clubs');
    }
};
<?php
/**
 * MIGRATION CORRETTA - TOURNAMENT TYPES
 *
 * File: database/migrations/2025_07_04_160820_create_tournament_types_table.php
 *
 * Crea la tabella tournament_types con la struttura corretta
 */

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('tournament_types', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('short_name', 20)->unique();
            $table->text('description')->nullable();
            $table->boolean('is_national')->default(false);
            $table->enum('level', ['zonale', 'nazionale'])->default('zonale');
            $table->enum('required_level', ['aspirante', 'primo_livello', 'regionale', 'nazionale', 'internazionale'])
                  ->default('aspirante');

            // ✅ FIXED: Physical columns per compatibility
            $table->integer('min_referees')->default(1);
            $table->integer('max_referees')->default(1);

            $table->integer('sort_order')->default(0);
            $table->boolean('is_active')->default(true);
            $table->json('settings')->nullable();
            $table->timestamps();

            // Indexes
            $table->index(['is_active', 'sort_order']);
            $table->index(['is_national', 'is_active']);
            $table->index('short_name');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tournament_types');
    }
};
<?php
/**
 * MIGRATION CORRETTA - TOURNAMENTS
 *
 * File: database/migrations/2025_07_04_160821_create_tournaments_table.php
 *
 * Usa tournament_type_id foreign key (FASE 2 compliant)
 */

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('tournaments', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->date('start_date');
            $table->date('end_date');
            $table->date('availability_deadline');
            $table->foreignId('club_id')->constrained('clubs');

            // ✅ FIXED: tournament_type_id instead of tournament_category_id
            $table->foreignId('tournament_type_id')->constrained('tournament_types');

            $table->foreignId('zone_id')->constrained('zones');
            $table->text('notes')->nullable();
            $table->enum('status', ['draft', 'open', 'closed', 'assigned', 'completed'])->default('draft');

            // Document generation fields
            $table->text('convocation_letter')->nullable();
            $table->text('club_letter')->nullable();
            $table->timestamp('letters_generated_at')->nullable();
            $table->string('convocation_file_path')->nullable();
            $table->string('convocation_file_name')->nullable();
            $table->timestamp('convocation_generated_at')->nullable();
            $table->string('club_letter_file_path')->nullable();
            $table->string('club_letter_file_name')->nullable();
            $table->timestamp('club_letter_generated_at')->nullable();
            $table->foreignId('documents_last_updated_by')->nullable()->constrained('users');
            $table->integer('document_version')->default(1);

            $table->timestamps();

            // ✅ FIXED: Indexes updated for tournament_type_id
            $table->index(['zone_id', 'status']);
            $table->index(['start_date', 'status']);
            $table->index(['tournament_type_id', 'status']);
            $table->index(['club_id', 'status']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('tournaments');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('availabilities', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users');
            $table->foreignId('tournament_id')->constrained('tournaments');
            $table->text('notes')->nullable();
            $table->timestamp('submitted_at');
            $table->timestamps();

            $table->unique(['user_id', 'tournament_id']);
            $table->index(['tournament_id', 'submitted_at']);
            $table->index(['user_id', 'submitted_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('availabilities');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('tournament_id')->constrained('tournaments');
            $table->foreignId('user_id')->constrained('users');
            $table->foreignId('assigned_by_id')->constrained('users');
            $table->enum('role', ['Arbitro', 'Direttore di Torneo', 'Osservatore'])->default('Arbitro');
            $table->text('notes')->nullable();
            $table->boolean('is_confirmed')->default(false);
            $table->timestamp('confirmed_at')->nullable();
            $table->timestamp('assigned_at');
            $table->boolean('notification_sent')->default(false);
            $table->timestamp('notification_sent_at')->nullable();
            $table->timestamps();

            $table->unique(['tournament_id', 'user_id']);
            $table->index(['user_id', 'is_confirmed']);
            $table->index(['tournament_id', 'role']);
            $table->index(['assigned_by_id', 'assigned_at']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('assignments');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('notifications', function (Blueprint $table) {
            $table->id();
            $table->foreignId('assignment_id')->constrained('assignments');
            $table->enum('recipient_type', ['referee', 'club', 'institutional']);
            $table->string('recipient_email');
            $table->string('subject');
            $table->text('body');
            $table->string('template_used')->nullable();
            $table->enum('status', ['pending', 'sent', 'failed', 'cancelled'])->default('pending');
            $table->timestamp('sent_at')->nullable();
            $table->text('error_message')->nullable();
            $table->integer('retry_count')->default(0);
            $table->json('attachments')->nullable();
            $table->timestamps();

            $table->index(['assignment_id', 'recipient_type']);
            $table->index(['status', 'created_at']);
            $table->index(['recipient_email', 'status']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('notifications');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // Create institutional_emails table
        Schema::create('institutional_emails', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email');
            $table->text('description')->nullable();
            $table->boolean('is_active')->default(true);
            $table->foreignId('zone_id')->nullable()->constrained('zones');
            $table->enum('category', ['federazione', 'comitati', 'zone', 'altro'])->default('altro');
            $table->boolean('receive_all_notifications')->default(false);
            $table->json('notification_types')->nullable();
            $table->timestamps();

            $table->index(['zone_id', 'is_active']);
            $table->index(['category', 'is_active']);
        });

        // Create letter_templates table
        Schema::create('letter_templates', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->enum('type', ['assignment', 'convocation', 'club', 'institutional'])->default('assignment');
            $table->string('subject');
            $table->text('body');
            $table->foreignId('zone_id')->nullable()->constrained('zones');
            $table->foreignId('tournament_type_id')->nullable()->constrained('tournament_types');
            $table->boolean('is_active')->default(true);
            $table->boolean('is_default')->default(false);
            $table->json('variables')->nullable();
            $table->timestamps();

            $table->index(['type', 'is_active']);
            $table->index(['zone_id', 'type']);
            $table->index(['tournament_type_id', 'type']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('letter_templates');
        Schema::dropIfExists('institutional_emails');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->string('key')->unique();
            $table->text('value')->nullable();
            $table->string('type')->default('string'); // string, boolean, integer, float, array, json
            $table->text('description')->nullable();
            $table->string('group')->default('general'); // general, mail, system, security, etc.
            $table->boolean('is_public')->default(false); // if setting can be viewed by non-admins
            $table->boolean('is_editable')->default(true); // if setting can be edited via UI
            $table->timestamps();

            $table->index(['group']);
            $table->index(['key', 'group']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('settings');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     * Crea solo la tabella referee_level_history per storico livelli arbitri
     */
    public function up(): void
    {
        Schema::create('referee_level_history', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
            $table->year('year');
            // ✅ ENUM corretto che corrisponde a users.level
            $table->enum('level', ['Aspirante', '1_livello', 'Regionale', 'Nazionale', 'Internazionale', 'Archivio']);
            $table->date('effective_date')->nullable();
            $table->text('notes')->nullable();
            $table->timestamps();

            // Constraint: un utente può avere solo un livello per anno
            $table->unique(['user_id', 'year']);

            // Indexes per query veloci
            $table->index(['year', 'level']);
            $table->index(['user_id', 'year']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('referee_level_history');
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up()
    {
        Schema::table('referees', function (Blueprint $table) {
            $table->text('notes')->nullable()->after('tax_code');
        });
    }

    public function down()
    {
        Schema::table('referees', function (Blueprint $table) {
            $table->dropColumn('notes');
        });
    }
};
<?php
// File: database/migrations/2025_07_19_160001_update_notifications_table.php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('notifications', function (Blueprint $table) {
            // Add new columns for extended functionality
            if (!Schema::hasColumn('notifications', 'priority')) {
                $table->integer('priority')->default(0)->after('retry_count');
            }

            if (!Schema::hasColumn('notifications', 'scheduled_at')) {
                $table->timestamp('scheduled_at')->nullable()->after('sent_at');
            }

            if (!Schema::hasColumn('notifications', 'expires_at')) {
                $table->timestamp('expires_at')->nullable()->after('scheduled_at');
            }

            if (!Schema::hasColumn('notifications', 'metadata')) {
                $table->json('metadata')->nullable()->after('attachments');
            }

            // Add indexes for better performance
            if (!Schema::hasIndex('notifications', ['status', 'priority', 'created_at'])) {
                $table->index(['status', 'priority', 'created_at'], 'idx_notifications_queue');
            }

            if (!Schema::hasIndex('notifications', ['recipient_type', 'created_at'])) {
                $table->index(['recipient_type', 'created_at'], 'idx_notifications_type_date');
            }
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('notifications', function (Blueprint $table) {
            // Drop indexes first
            $table->dropIndex('idx_notifications_queue');
            $table->dropIndex('idx_notifications_type_date');

            // Drop columns
            if (Schema::hasColumn('notifications', 'priority')) {
                $table->dropColumn('priority');
            }

            if (Schema::hasColumn('notifications', 'scheduled_at')) {
                $table->dropColumn('scheduled_at');
            }

            if (Schema::hasColumn('notifications', 'expires_at')) {
                $table->dropColumn('expires_at');
            }

            if (Schema::hasColumn('notifications', 'metadata')) {
                $table->dropColumn('metadata');
            }
        });
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('zones', function (Blueprint $table) {
            $table->boolean('is_active')->default(true)->after('description');

            // Add index for performance
            $table->index('is_active');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('zones', function (Blueprint $table) {
            $table->dropIndex(['is_active']);
            $table->dropColumn('is_active');
        });
    }
};
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('zones', function (Blueprint $table) {
            // ✅ AGGIUNGI ENTRAMBE LE COLONNE MANCANTI
            $table->boolean('is_national')->default(false);

            // Add indexes for performance
            $table->index('is_national');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('zones', function (Blueprint $table) {
            $table->dropIndex(['is_national']);
            $table->dropColumn(['is_national']);
        });
    }
};
