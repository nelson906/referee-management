# üìã Tabella Completa: Sostituzioni $levels ‚Üí referee_levels()

## üé® **NELLE VIEW BLADE**

### 1. **Dropdown/Select (foreach)**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `@foreach($levels as $key => $label)` | `@foreach(referee_levels() as $key => $label)` |
| `@foreach ($levels as $key => $label)` | `@foreach(referee_levels() as $key => $label)` |
| `@foreach( $levels as $key => $label )` | `@foreach(referee_levels() as $key => $label)` |

### 2. **Mostrare label livello (accesso array)**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `{{ $levels[$referee->level] ?? 'N/A' }}` | `{{ referee_level_label($referee->level) }}` |
| `{{ $levels[$user->level] ?? 'N/A' }}` | `{{ referee_level_label($user->level) }}` |
| `{{ $levels[$item->level] ?? 'Non specificato' }}` | `{{ referee_level_label($item->level) }}` |
| `$levels[$referee->level]` | `referee_level_label($referee->level)` |

### 3. **Comparazioni per selected/checked**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `{{ $referee->level == $key ? 'selected' : '' }}` | `{{ normalize_referee_level($referee->level) == $key ? 'selected' : '' }}` |
| `{{ $user->level === $key ? 'selected' : '' }}` | `{{ normalize_referee_level($user->level) === $key ? 'selected' : '' }}` |
| `{{ old('level', $referee->level) == $key ? 'selected' : '' }}` | `{{ old('level', normalize_referee_level($referee->level)) == $key ? 'selected' : '' }}` |

### 4. **Debug/Dump (rimuovi dopo fix)**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `{{ dd($levels) }}` | `{{ dd(referee_levels()) }}` |
| `@dump($levels)` | `@dump(referee_levels())` |
| `{{ var_dump($levels) }}` | `{{ var_dump(referee_levels()) }}` |

### 5. **Condizioni if/unless**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `@if(isset($levels[$referee->level]))` | `@if(referee_level_label($referee->level) !== 'Non specificato')` |
| `@unless(empty($levels))` | `@unless(empty(referee_levels()))` |

---

## üéÆ **NEI CONTROLLER**

### 6. **Definizione variabile (rimuovi completamente)**
| ‚ùå RIMUOVI QUESTE RIGHE |
|-------------------------|
| `$levels = RefereeLevelsHelper::getSelectOptions();` |
| `$levels = RefereeLevelsHelper::getSelectOptions(true);` |
| `$levels = config('referee.levels');` |
| `$levels = $this->getLevels();` |

### 7. **Compact (rimuovi 'levels')**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `compact('referees', 'zones', 'levels')` | `compact('referees', 'zones')` |
| `compact('referee', 'levels', 'zones')` | `compact('referee', 'zones')` |
| `compact('user', 'zones', 'levels')` | `compact('user', 'zones')` |
| `compact('levels', 'zones')` | `compact('zones')` |
| `compact('levels')` | `[]` o rimuovi compact |

### 8. **Validazione (nei controller/requests)**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `'level' => 'required\|in:' . implode(',', array_keys($levels))` | `'level' => ['required', function ($attribute, $value, $fail) { if (!RefereeLevelsHelper::isValid($value)) { $fail("Livello non valido."); } }]` |

---

## üîß **NEI MODEL/HELPER**

### 9. **Metodi model che restituiscono levels**
| ‚ùå CERCA | ‚úÖ SOSTITUISCI |
|----------|----------------|
| `public static function getLevels() { return self::LEVELS; }` | `public static function getLevels() { return RefereeLevelsHelper::getSelectOptions(); }` |
| `const LEVELS = [...]` | Rimuovi e usa RefereeLevelsHelper |

---

## üö® **CASI SPECIALI**

### 10. **Il tuo caso specifico - Span con badge**
```blade
‚ùå CERCA:
<span class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
    {{ $levels[$referee->level] ?? 'N/A' }}
</span>

‚úÖ SOSTITUISCI:
<span class="px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800">
    {{ referee_level_label($referee->level) }}
</span>
```

### 11. **Tabelle con livelli**
```blade
‚ùå CERCA:
<td>{{ $levels[$item->level] ?? 'Sconosciuto' }}</td>

‚úÖ SOSTITUISCI:
<td>{{ referee_level_label($item->level) }}</td>
```

### 12. **JavaScript che usa levels**
```blade
‚ùå CERCA:
<script>
const levels = @json($levels);
</script>

‚úÖ SOSTITUISCI:
<script>
const levels = @json(referee_levels());
</script>
```

---

## üîç **COMANDI UTILI PER TROVARE I PATTERN**

```bash
# Trova tutti i $levels nelle view
grep -rn "\$levels" resources/views/ --include="*.blade.php"

# Trova compact con levels nei controller
grep -rn "compact.*levels" app/Http/Controllers/ --include="*.php"

# Trova definizioni di $levels
grep -rn "\$levels\s*=" app/ --include="*.php"
```

---

## ‚úÖ **VERIFICA FINALE**

Dopo tutte le sostituzioni, questi comandi devono restituire ZERO risultati:

```bash
# Non devono esserci pi√π $levels nelle view
grep -r "\$levels" resources/views/ --include="*.blade.php"

# Non devono esserci pi√π 'levels' nei compact
grep -r "compact.*levels" app/Http/Controllers/ --include="*.php"
```

---

## üéØ **PER IL TUO CASO SPECIFICO**

La tua riga:
```blade
{{ $levels[$referee->level] ?? 'N/A' }}
```

Diventa:
```blade
{{ referee_level_label($referee->level) }}
```

**Motivo**: `referee_level_label()` gestisce automaticamente i casi null/vuoti e restituisce "Non specificato" invece di 'N/A', ed √® pi√π sicuro.
